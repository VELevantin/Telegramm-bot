import logging
import random
from config import BOT_TOKEN
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from tasks import beginner_tasks, intermediate_tasks, advanced_tasks, native_speaker_tasks


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logger = logging.getLogger(__name__)

CHOOSING_LEVEL, CHOOSING_TASK, DOING_TASK, CHOOSING_ACTION = range(4)

reply_keyboard_level = [
    ["–ù–æ–≤–∏—á–æ–∫", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π", "–ù–æ—Å–∏—Ç–µ–ª—å"],
]
markup_level = ReplyKeyboardMarkup(reply_keyboard_level, one_time_keyboard=True, resize_keyboard=True)

reply_keyboard_task = [
    ["–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ", "–î–æ–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", "–ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏"],
]
markup_task = ReplyKeyboardMarkup(reply_keyboard_task, one_time_keyboard=True, resize_keyboard=True)

reply_keyboard_action = [
    ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", "–°–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è"],
]
markup_action = ReplyKeyboardMarkup(reply_keyboard_action, one_time_keyboard=True, resize_keyboard=True)


user_scores = {}

user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. "
        "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º?",
        reply_markup=markup_level,
    )

    return CHOOSING_LEVEL


async def choose_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    context.user_data["level"] = text.lower()
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å {text.lower()}. "
        "–î–∞–≤–∞–π –ø–æ—Ä–µ—à–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏–π, –∑–∞ –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏ (–ø–æ–∫–∞ —á—Ç–æ –æ–Ω–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ). "
        "–° –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å?",
        reply_markup=markup_task,
    )

    return CHOOSING_TASK


async def generate_task(level: str, task_type: str) -> str:
    task = ""
    if level.lower() == "–Ω–æ–≤–∏—á–æ–∫":
        tasks = beginner_tasks.get(task_type)
    elif level.lower() == "—Å—Ä–µ–¥–Ω–∏–π":
        tasks = intermediate_tasks.get(task_type)
    elif level.lower() == "–≤—ã—Å–æ–∫–∏–π":
        tasks = advanced_tasks.get(task_type)
    elif level.lower() == "–Ω–æ—Å–∏—Ç–µ–ª—å":
        tasks = native_speaker_tasks.get(task_type)
    if tasks:
        task = random.choice(tasks)
    return task


async def choose_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    level = context.user_data.get("level")
    if text == "–ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏":
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º –Ω–µ–ª—å–∑—è.")
        return DOING_TASK
    else:
        task = await generate_task(level, text)
        if task:
            await update.message.reply_text(f"–¢—ã –≤—ã–±—Ä–∞–ª –∑–∞–¥–∞–Ω–∏–µ {text}. –ú—ã –Ω–∞—á–∏–Ω–∞–µ–º!")
            if text == "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ":
                await update.message.reply_text(f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *{task}*", parse_mode="Markdown")
            else:
                await update.message.reply_text(f"–ó–∞–¥–∞–Ω–∏–µ: {task}")
            context.user_data["task"] = task
            context.user_data["task_type"] = text
            return DOING_TASK
        else:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return ConversationHandler.END


async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    task = context.user_data.get("task")
    is_correct = random.choice([True, False])
    new_score = 0

    if is_correct:
        current_score = user_scores.get(update.effective_user.id, 0)

        if context.user_data["level"] == "–Ω–æ–≤–∏—á–æ–∫":
            new_score = current_score + 1

        elif context.user_data["level"] == "—Å—Ä–µ–¥–Ω–∏–π":
            new_score = current_score + 2

        elif context.user_data["level"] == "–≤—ã—Å–æ–∫–∏–π":
            new_score = current_score + 3

        elif context.user_data["level"] == "–Ω–æ—Å–∏—Ç–µ–ª—å":
            new_score = current_score + 4

        user_scores[update.effective_user.id] = new_score

        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–≤–æ–π —Å—á–µ—Ç —Ç–µ–ø–µ—Ä—å: {}".format(new_score))
        await update.message.reply_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup_action)

        return CHOOSING_ACTION

    else:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        await update.message.reply_text(f"–ó–∞–¥–∞–Ω–∏–µ: {task}")

        return DOING_TASK


async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    level = context.user_data.get("level")
    task = context.user_data.get("task")
    task_type = context.user_data.get("task_type")

    if text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        task = await generate_task(level, task_type)
        if task:
            if text == "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ":
                await update.message.reply_text(f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *{task}*", parse_mode="Markdown")
            else:
                await update.message.reply_text(f"–ó–∞–¥–∞–Ω–∏–µ: {task}")
            context.user_data["task"] = task
            return DOING_TASK
        else:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END
    elif text == "–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å":
        await update.message.reply_text("–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?", reply_markup=markup_level)
        return CHOOSING_LEVEL
    elif text == "–°–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è":
        await update.message.reply_text("–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?", reply_markup=markup_task)
        return CHOOSING_TASK

    return DOING_TASK


def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_LEVEL: [
                MessageHandler(
                    filters.Regex("^(–ù–æ–≤–∏—á–æ–∫|–°—Ä–µ–¥–Ω–∏–π|–í—ã—Å–æ–∫–∏–π|–ù–æ—Å–∏—Ç–µ–ª—å)$"), choose_level
                ),
            ],
            CHOOSING_TASK: [
                MessageHandler(
                    filters.Regex("^(–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç|–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ|–î–æ–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥|–ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏)$"), choose_task
                ),
            ],
            DOING_TASK: [
                MessageHandler(filters.TEXT, check_answer),
            ],
            CHOOSING_ACTION: [
                MessageHandler(filters.Regex("^(–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åü´°|–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å|–°–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è)$"), choose_action),
            ],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()

